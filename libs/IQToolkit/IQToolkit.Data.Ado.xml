<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IQToolkit.Data.Ado</name>
    </assembly>
    <members>
        <member name="T:IQToolkit.Data.DbEntityProvider">
            <summary>
            The base type for <see cref="T:IQToolkit.Data.EntityProvider"/>'s that use a System.Data.<see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.#ctor(System.Data.Common.DbConnection,IQToolkit.Data.Common.QueryLanguage,IQToolkit.Data.Common.QueryMapping,IQToolkit.Data.Common.QueryPolicy)">
            <summary>
            Constructs a new <see cref="T:IQToolkit.Data.DbEntityProvider"/>
            </summary>
        </member>
        <member name="P:IQToolkit.Data.DbEntityProvider.Connection">
            <summary>
            The <see cref="T:System.Data.Common.DbConnection"/> used for executing queries.
            </summary>
        </member>
        <member name="P:IQToolkit.Data.DbEntityProvider.Transaction">
            <summary>
            The <see cref="T:System.Data.Common.DbTransaction"/> to use for updates.
            </summary>
        </member>
        <member name="P:IQToolkit.Data.DbEntityProvider.Isolation">
            <summary>
            The <see cref="T:System.Data.IsolationLevel"/> used for transactions.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.WithMapping(IQToolkit.Data.Common.QueryMapping)">
            <summary>
            Creates a new instance of the <see cref="T:IQToolkit.Data.DbEntityProvider"/> that uses the specified <see cref="T:IQToolkit.Data.Common.QueryMapping"/>.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.WithPolicy(IQToolkit.Data.Common.QueryPolicy)">
            <summary>
            Creates a new instance of the <see cref="T:IQToolkit.Data.DbEntityProvider"/> that uses the specified <see cref="T:IQToolkit.Data.Common.QueryPolicy"/>.
            </summary>
        </member>
        <member name="P:IQToolkit.Data.DbEntityProvider.ActionOpenedConnection">
            <summary>
            True if a query or other action caused the connection to become open.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.StartUsingConnection">
            <summary>
            Opens the connection if it is currently closed.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.StopUsingConnection">
            <summary>
            Closes the connection if no actions still require it.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.DoConnected(System.Action)">
            <summary>
            Invokes the specified <see cref="T:System.Action"/> while the connection is open.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.DoTransacted(System.Action)">
            <summary>
            Invokes the specified <see cref="T:System.Action"/> during a database transaction.
            If no transaction is currently associated with the <see cref="T:IQToolkit.Data.DbEntityProvider"/> a new
            one is started for the duration of the action. If the action completes without exception
            the transation is commited, otherwise it is aborted.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.ExecuteCommand(System.String)">
            <summary>
            Execute the command specified in the database's language against the database.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.Executor.GetCommand(IQToolkit.Data.Common.QueryCommand,System.Object[])">
            <summary>
            Get an ADO command object initialized with the command-text and parameters
            </summary>
        </member>
        <member name="M:IQToolkit.Data.DbEntityProvider.Executor.LogCommand(IQToolkit.Data.Common.QueryCommand,System.Object[])">
            <summary>
            Write a command and parameters to the log
            </summary>
            <param name="command"></param>
            <param name="paramValues"></param>
        </member>
        <member name="T:IQToolkit.Data.DbFieldReader">
            <summary>
            A <see cref="T:IQToolkit.Data.Common.FieldReader"/> implemented over a <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
        </member>
        <member name="T:IQToolkit.Data.SqlQueryType">
            <summary>
            A <see cref="T:IQToolkit.Data.Common.QueryType"/> defined over <see cref="P:IQToolkit.Data.SqlQueryType.SqlType"/>.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.SqlQueryType.#ctor(IQToolkit.Data.SqlType,System.Boolean,System.Int32,System.Int16,System.Int16)">
            <summary>
            Construct a <see cref="T:IQToolkit.Data.SqlQueryType"/>
            </summary>
        </member>
        <member name="T:IQToolkit.Data.SqlTypeSystem">
            <summary>
            A <see cref="T:IQToolkit.Data.Common.QueryTypeSystem"/> for types based on <see cref="T:IQToolkit.Data.SqlType"/>.
            Default parser, format implementations assume a type system similar to TSQL.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.SqlTypeSystem.GetQueryType(System.String,System.String[],System.Boolean)">
            <summary>
            Gets the <see cref="T:IQToolkit.Data.Common.QueryType"/> for a know database type.
            This API does not parse the type name.
            Arguments to the type are specified by the <see cref="P:args"/> parameter.
            </summary>
            <param name="typeName">The base name of a type in the databases language.</param>
            <param name="args">Any additional arguments (like length of a text type)</param>
            <param name="isNotNull">Determines if the type cannot be null.</param>
        </member>
        <member name="M:IQToolkit.Data.SqlTypeSystem.NewType(IQToolkit.Data.SqlType,System.Boolean,System.Int32,System.Int16,System.Int16)">
            <summary>
            Construct a new <see cref="T:IQToolkit.Data.Common.QueryType"/> instance from 
            </summary>
        </member>
        <member name="M:IQToolkit.Data.SqlTypeSystem.GetSqlType(System.String)">
            <summary>
            Gets the <see cref="T:IQToolkit.Data.SqlType"/> given the type name (same name as <see cref="T:IQToolkit.Data.SqlType"/> members)
            </summary>
        </member>
        <member name="P:IQToolkit.Data.SqlTypeSystem.StringDefaultSize">
            <summary>
            Default maximum size of a text data type.
            </summary>
        </member>
        <member name="P:IQToolkit.Data.SqlTypeSystem.BinaryDefaultSize">
            <summary>
            Default maximum size of a binary data type.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.SqlTypeSystem.GetColumnType(System.Type)">
            <summary>
            Gets the <see cref="T:IQToolkit.Data.Common.QueryType"/> associated with a CLR type.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.SqlTypeSystem.IsVariableLength(IQToolkit.Data.SqlType)">
            <summary>
            True if the <see cref="T:IQToolkit.Data.SqlType"/> is a variable length type.
            </summary>
        </member>
        <member name="M:IQToolkit.Data.SqlTypeSystem.Format(IQToolkit.Data.Common.QueryType,System.Boolean)">
            <summary>
            Format the <see cref="T:IQToolkit.Data.Common.QueryType"/> as if specified in the database language.
            </summary>
        </member>
    </members>
</doc>
